services:

  db:
    image: postgres:15.3-alpine3.18
    container_name: db
    mem_limit: 1536MB
    mem_reservation: 1024MB
    restart: unless-stopped
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data:/var/lib/postgresql/data/
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  hotelAPI:
    image: ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:${DOCKER_TAG}
    container_name: hotelAPI
    restart: unless-stopped
    ports:
      - "7070:7070"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - PRODUCTION=${PRODUCTION}
      - TOKEN_SECRET_KEY=${TOKEN_SECRET_KEY}
      - TOKEN_EXPIRATION_TIME=${TOKEN_EXPIRATION_TIME}
      - TOKEN_ISSUER=${TOKEN_ISSUER}
      - TOKEN_AUDIENCE=${TOKEN_AUDIENCE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
      - frontend

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Watchtower needs access to the Docker socket
    environment:
      - WATCHTOWER_INTERVAL=300  # Interval in seconds (300s = 5 minutes)
      - WATCHTOWER_CLEANUP=true  # Optional: removes old images after update
      - WATCHTOWER_INCLUDE_STOPPED=true  # Optional: include stopped containers if needed
    command: hotelAPI

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - frontend

networks:
  backend:
    name: backend
    driver: bridge
  frontend:
    name: frontend
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
